import { execSync } from 'child_process';
import { Command } from 'commander';
import { commitAndPush, createAndPushTag } from '../../utils/git.js';
import { generateChangelogSummary } from '../../utils/openai.js';
import { bumpVersion } from './bump-version.js';
import { createReleaseBranch } from './create-release-branch.js';
import { writeChangelog } from './write-changelog.js';

const releaseCommand = new Command('release');

releaseCommand
    .argument('[bump]', 'version bump type (major, minor, patch)', 'patch')
    .option('--from <branch>', 'Base branch to create release branch from', 'develop')
    .option('--api-key <key>', 'OpenAI API key (optional, will use OPENAI_API_KEY env if not provided)')
    .description('Release new version, bumping the version (default: patch)')
    .action(async (bump: string, options: { from: string; apiKey?: string }) => {
        const bumpType = bump.toLowerCase();
        if (!['major', 'minor', 'patch'].includes(bumpType)) {
            console.error('Invalid bump type. Use major, minor, or patch.');
            process.exit(1);
        }

        // Check if OpenAI API key is available
        if (!options.apiKey && !process.env.OPENAI_API_KEY) {
            console.error(
                'OpenAI API key is required. Provide it via --api-key option or OPENAI_API_KEY environment variable.'
            );
            process.exit(1);
        }

        // 1. Check for actual changes between branches
        try {
            // Get actual file changes between branches
            const changes = execSync(`git diff main..${options.from} --name-only`, { encoding: 'utf-8' }).trim();

            if (!changes) {
                console.error('No changes found between branches. Nothing to release.');
                process.exit(1);
            }

            console.log('Changes detected:', changes);
        } catch (error) {
            console.error('Error checking for changes:', error);
            process.exit(1);
        }

        // 2. Create release branch
        const newVersion = await bumpVersion(bumpType as 'major' | 'minor' | 'patch');
        if (!newVersion) {
            console.error('Aborting release due to version bump error.');
            process.exit(1);
        }

        const branchCreated = createReleaseBranch(newVersion, options.from);
        if (!branchCreated) {
            console.error('Aborting release due to branch creation error.');
            process.exit(1);
        }

        try {
            // 4. Get detailed diff between branches
            const diffOutput = execSync(`git diff main..${options.from}`, { encoding: 'utf-8' }).trim();

            // 5. Generate changelog summary using OpenAI
            const changelogContent = await generateChangelogSummary(diffOutput, options.apiKey);
            const summary = `## [${newVersion}] - ${new Date().toISOString().split('T')[0]}\n\n${changelogContent}\n\n_Generated by [babygit](https://github.com/dibenkobit/babygit)_`;

            // 6. Write summary to changelog
            await writeChangelog(summary);

            const releaseBranch = `release/${newVersion}`;
            const pushed = await commitAndPush(`docs: Update changelog for version ${newVersion}`, releaseBranch);

            if (!pushed) {
                console.error('Aborting release due to push error.');
                process.exit(1);
            }

            // Create and push tag
            const tagged = await createAndPushTag(newVersion);
            if (!tagged) {
                console.error('Aborting release due to tag creation error.');
                process.exit(1);
            }

            console.log(`Release ${newVersion} created successfully!`);
        } catch (error) {
            console.error('Error in release process:', error);
            process.exit(1);
        }
    });

export default releaseCommand;
